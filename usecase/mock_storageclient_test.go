// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"cloud.google.com/go/storage"
	"sync"
)

// Ensure, that StorageClientMock does implement StorageClient.
// If this is not the case, regenerate this file with moq.
var _ StorageClient = &StorageClientMock{}

// StorageClientMock is a mock implementation of StorageClient.
//
//	func TestSomethingThatUsesStorageClient(t *testing.T) {
//
//		// make and configure a mocked StorageClient
//		mockedStorageClient := &StorageClientMock{
//			BucketFunc: func(name string) *storage.BucketHandle {
//				panic("mock out the Bucket method")
//			},
//		}
//
//		// use mockedStorageClient in code that requires StorageClient
//		// and then make assertions.
//
//	}
type StorageClientMock struct {
	// BucketFunc mocks the Bucket method.
	BucketFunc func(name string) *storage.BucketHandle

	// calls tracks calls to the methods.
	calls struct {
		// Bucket holds details about calls to the Bucket method.
		Bucket []struct {
			// Name is the name argument value.
			Name string
		}
	}
	lockBucket sync.RWMutex
}

// Bucket calls BucketFunc.
func (mock *StorageClientMock) Bucket(name string) *storage.BucketHandle {
	if mock.BucketFunc == nil {
		panic("StorageClientMock.BucketFunc: method is nil but StorageClient.Bucket was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockBucket.Lock()
	mock.calls.Bucket = append(mock.calls.Bucket, callInfo)
	mock.lockBucket.Unlock()
	return mock.BucketFunc(name)
}

// BucketCalls gets all the calls that were made to Bucket.
// Check the length with:
//
//	len(mockedStorageClient.BucketCalls())
func (mock *StorageClientMock) BucketCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockBucket.RLock()
	calls = mock.calls.Bucket
	mock.lockBucket.RUnlock()
	return calls
}
